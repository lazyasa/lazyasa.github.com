<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: puppet | Asa Hsu]]></title>
  <link href="http://lazyasa.github.com/blog/categories/puppet/atom.xml" rel="self"/>
  <link href="http://lazyasa.github.com/"/>
  <updated>2014-07-16T11:09:00+08:00</updated>
  <id>http://lazyasa.github.com/</id>
  <author>
    <name><![CDATA[Asa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppet module]]></title>
    <link href="http://lazyasa.github.com/blog/2014/07/16/puppet-module/"/>
    <updated>2014-07-16T11:06:00+08:00</updated>
    <id>http://lazyasa.github.com/blog/2014/07/16/puppet-module</id>
    <content type="html"><![CDATA[<h4>Module路徑位置</h4>

<pre><code>/etc/puppet/modules
</code></pre>

<h4>Module架構</h4>

<pre><code>/etc/puppet/modules/example
└── example
     ├── files  #存放文件目錄
     │   └── etc
     │       └── example
     ├── manifests  #存放module pp設定文件目錄
     │   └── init.pp
     └── templates #存放module目錄
</code></pre>

<h2>Puppet SSH Module  example</h2>

<h4>ssh/manifests/init.pp</h4>

<p>確認每個class都執行過才執行最後一個ssh class</p>

<pre><code>class ssh {     class { '::ssh::package': } -&gt;  class { '::ssh::config': }  -&gt;  class { '::ssh::service':}  -&gt;  Class['ssh']    }
</code></pre>

<h4>ssh/manifests/install.pp</h4>

<p>package安裝檔    class ssh::install {      package { "openssh":      ensure => present,  } }</p>

<h4>ssh/manifests/config.pp</h4>

<p>file config檔案</p>

<pre><code>class ssh::config {
  file { "/etc/ssh/sshd_config":
    ensure  =&gt; present,
    owner   =&gt; 'root',
    group   =&gt; 'root',
    mode    =&gt; 0600,
    source  =&gt; "puppet:///modules/ssh/sshd_config",
    require =&gt; Class["ssh::package"],
    notify  =&gt; Class["ssh::service"],
  }
}####ssh/manifests/service.pp
class ssh::service {
  service { "sshd":
    ensure     =&gt; running,
    hasstatus  =&gt; true,
    hasrestart =&gt; true,
    enable     =&gt; true,
    require    =&gt; Class["ssh::config"],
} }
</code></pre>

<blockquote><p>Class Tip<br/>
You can nest classes by another layer, for example ssh::config::client, and our auto-importing magic will still work by placing this class in the ssh/manifests/config/client.pp file.</p></blockquote>

<h4>Puppet 測試不執行指令，只會跑完流程不會實際執行</h4>

<pre><code># puppet agent test -vd -noop #vd debug mode #noop 測試執行
</code></pre>

<h2>Puppet Package</h2>

<h5>Description</h5>

<p>Manage packages. There is a basic dichotomy in package support right now: Some package types (e.g., yum and apt) can retrieve their own package files, while others (e.g., rpm and sun) cannot. For those package formats that cannot retrieve their own files, you can use the source parameter to point to the correct file.
Puppet will automatically guess the packaging format that you are using based on the platform you are on, but you can override it using the provider parameter; each provider defines what it requires in order to function, and you must meet those requirements to use a given provider.
Autorequires: If Puppet is managing the files specified as a package's adminfile, responsefile, or source, the package resource will autorequire those files.</p>

<h5>Attributes</h5>

<pre><code>package { 'resource title':
name              =&gt; # (namevar) The package name.  This is the name that the...
ensure            =&gt; # What state the package should be in. On...
adminfile         =&gt; # A file containing package defaults for...
allowcdrom        =&gt; # Tells apt to allow cdrom sources in the...
category          =&gt; # A read-only parameter set by the...
configfiles       =&gt; # Whether configfiles should be kept or replaced.  
description       =&gt; # A read-only parameter set by the...
flavor            =&gt; # OpenBSD supports 'flavors', which are further...
install_options   =&gt; # An array of additional options to pass when...
instance          =&gt; # A read-only parameter set by the...
platform          =&gt; # A read-only parameter set by the...
provider          =&gt; # The specific backend to use for this `package...
responsefile      =&gt; # A file containing any necessary answers to...
root              =&gt; # A read-only parameter set by the...
source            =&gt; # Where to find the actual package.  This must be...
status            =&gt; # A read-only parameter set by the...
uninstall_options =&gt; # An array of additional options to pass when...
vendor            =&gt; # A read-only parameter set by the...
# ...plus any applicable metaparameters.
}
</code></pre>

<h4>功能</h4>

<ol>
<li>管理軟體安裝，那些軟體解除安裝</li>
<li>管理軟體是否更新</li>
<li>要求系統設定yum repo等等</li>
<li>有關不同操作系統支持類型請查閱http://docs.puppetlabs.com/references/stable/type.html</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet 基本設定]]></title>
    <link href="http://lazyasa.github.com/blog/2014/07/16/puppet-basic-setting/"/>
    <updated>2014-07-16T10:56:00+08:00</updated>
    <id>http://lazyasa.github.com/blog/2014/07/16/puppet-basic-setting</id>
    <content type="html"><![CDATA[<h4>設定檔位置</h4>

<pre><code>/etc/puppet/puppet.conf
</code></pre>

<h4>Master site.pp指定安裝檔案位置</h4>

<pre><code>/etc/puppet/manifests/site.pp
</code></pre>

<h4>安裝Master</h4>

<p>1.安裝套件</p>

<pre><code># yum install puppet puppet-server facter -y #系統會自己安裝一些ruby相關套件
</code></pre>

<p>2.設定puppet.conf</p>

<pre><code># cp /etc/puppet/puppet.conf{,.bak} ＃備份config檔案
# vim /etc/puppet/puppet.conf
</code></pre>

<p>3.建立site.pp</p>

<pre><code># touch /etc/puppet/manifests/site.pp
</code></pre>

<p>4.啟動puppet</p>

<pre><code># /etc/init.d/puppetmaster start
# chkconfig puppetmaster on #設定開機啟動
</code></pre>

<h4>安裝Agent</h4>

<p>1.安裝套件</p>

<pre><code># yum install puppet facter     
</code></pre>

<p>2.設定puppet.conf</p>

<pre><code># cp /etc/puppet/puppet.conf{,.bak} ＃備份config檔案
# vim /etc/puppet/puppet.conf
</code></pre>

<p>在[agent]加上server</p>

<pre><code>server = myserver.example.com
</code></pre>

<p>3.請求CA認證</p>

<p><a href="">參考網址</a></p>

<p>4.Server端認證</p>

<blockquote><p>如果需要常駐在設定檔設定 <br/>
[agent]  <br/>
runinterval=3600 #3600秒</p></blockquote>

<h2>site.pp 基本設定</h2>

<p>基本安裝  <br/>
<code>vim /etc/puppet/manifests/site.pp</code></p>

<pre><code>    node default    
 {  
    include defaultclassname    
 }
</code></pre>

<p>針對不同機器指定要安裝的module</p>

<pre><code>node  'puppet.example.com'  
{   
    # Puppet code wll go here   
}


node  'web.example.com' 
{   
    # Puppet code will go here  
}
</code></pre>

<p>或是一次設定大量機器  node</p>

<pre><code>'web1.example.com', 
'web2.example.com', 
'web3.example.com'  
{   
    # Puppet code goes here 
}   
</code></pre>

<p>正規化寫法，機器會自己去撈全部的機器例如 web1 到 web20</p>

<pre><code>node /^web\d+\.example\.com$/   {       # Puppet code goes here }
</code></pre>

<p>也可以使用繼承</p>

<pre><code>node basenode {
   include  sudo
   include  mailx
}   

node
'web.example.com'
    inherits basenode {
         include apache
}
</code></pre>

<h2>Class寫法</h2>

<h4>Class inheritance</h4>

<pre><code>class ssh::params {
  case $::osfamily {
  'Debian': { $sshd_package  = 'ssh' }
  'RedHat': { $sshd_package  = 'openssh-server' }
  default:  {fail("Login class does not work on osfamily: ${::osfamily}")}
  }
}

class ssh inherits ssh::params {
  package { $::ssh::params::sshd_package:
    ensure =&gt; installed,
  }
}

include ssh 
</code></pre>

<h4>Class inheritance另一種寫法</h4>

<pre><code>class ssh {
  include ssh::params
  package { $::ssh::params::sshd_package:
    ensure =&gt; installed,
  }
}
include ssh
</code></pre>

<h4>當有不同作業系統時，建議拆出一個class</h4>

<pre><code>class ssh::params {
    case $::osfamily{
        Solaris: {
            $ssh_package_name = 'openssh';
        }
        Debain: {
            $ssh_package_name = 'openssh-server';
        }
        RedHat: {
            $ssh_package_name = 'openssh-server';
        }
        default: {
            fail("Moudle propuppet-ssh dose not support osfamily ${::osfamily}")
        }
    }
}
</code></pre>

<p>in SSH Package class</p>

<pre><code>class ssh::package {
    include ssh::params
    package { "ssh":
        ensure =&gt; present,
        name =&gt; $ssh::params::ssh_package_name,
    }
}   
</code></pre>
]]></content>
  </entry>
  
</feed>
